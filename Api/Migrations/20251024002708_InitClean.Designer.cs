// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(GymDbContext))]
    [Migration("20251024002708_InitClean")]
    partial class InitClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Api.Data.Models.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsPredeterminado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("es_predeterminado");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("avatar", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Checkin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_hora");

                    b.Property<string>("Origen")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("origen");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.Property<int>("TurnoPlantillaId")
                        .HasColumnType("int")
                        .HasColumnName("turno_plantilla_id");

                    b.HasKey("Id");

                    b.HasIndex("SocioId");

                    b.HasIndex("TurnoPlantillaId");

                    b.ToTable("checkin", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.DiaSemana", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("dia_semana", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Ejercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Grupo")
                        .HasColumnType("longtext")
                        .HasColumnName("grupo");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.Property<string>("Tips")
                        .HasColumnType("longtext")
                        .HasColumnName("tips");

                    b.HasKey("Id");

                    b.ToTable("ejercicio", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.EstadoOrdenPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("estado_orden_pago", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.OrdenPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComprobanteId")
                        .HasColumnType("int")
                        .HasColumnName("comprobante_id");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("estado_id");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("monto");

                    b.Property<string>("Notas")
                        .HasColumnType("longtext")
                        .HasColumnName("notas");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.Property<DateTime?>("VenceEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("vence_en");

                    b.HasKey("Id");

                    b.HasIndex("ComprobanteId")
                        .IsUnique();

                    b.HasIndex("EstadoId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SocioId");

                    b.ToTable("orden_pago", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expira")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expira");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("password_reset_tokens", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Personal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext")
                        .HasColumnName("direccion");

                    b.Property<string>("Especialidad")
                        .HasColumnType("longtext")
                        .HasColumnName("especialidad");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.ToTable("personal", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<int>("DiasPorSemana")
                        .HasColumnType("int")
                        .HasColumnName("dias_por_semana");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("precio");

                    b.HasKey("Id");

                    b.ToTable("plan", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.RegistroEntrenamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext")
                        .HasColumnName("observaciones");

                    b.Property<int>("RutinaAsignadaId")
                        .HasColumnType("int")
                        .HasColumnName("rutina_asignada_id");

                    b.HasKey("Id");

                    b.HasIndex("RutinaAsignadaId");

                    b.ToTable("registro_entrenamiento", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.RegistroItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Carga")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("carga");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("ejercicio_id");

                    b.Property<int>("RegistroId")
                        .HasColumnType("int")
                        .HasColumnName("registro_id");

                    b.Property<int?>("Repeticiones")
                        .HasColumnType("int")
                        .HasColumnName("repeticiones");

                    b.Property<int?>("Series")
                        .HasColumnType("int")
                        .HasColumnName("series");

                    b.HasKey("Id");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("RegistroId");

                    b.ToTable("registro_item", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.RutinaAsignada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Fin")
                        .HasColumnType("date")
                        .HasColumnName("fin");

                    b.Property<DateOnly>("Inicio")
                        .HasColumnType("date")
                        .HasColumnName("inicio");

                    b.Property<string>("Notas")
                        .HasColumnType("longtext")
                        .HasColumnName("notas");

                    b.Property<int>("RutinaId")
                        .HasColumnType("int")
                        .HasColumnName("rutina_id");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.HasKey("Id");

                    b.HasIndex("RutinaId");

                    b.HasIndex("SocioId");

                    b.ToTable("rutina_asignada", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.RutinaPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.Property<string>("Objetivo")
                        .HasColumnType("longtext")
                        .HasColumnName("objetivo");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("rutina_plantilla", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.RutinaPlantillaEjercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DescansoSeg")
                        .HasColumnType("int")
                        .HasColumnName("descanso_seg");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("ejercicio_id");

                    b.Property<int>("Orden")
                        .HasColumnType("int")
                        .HasColumnName("orden");

                    b.Property<int?>("Repeticiones")
                        .HasColumnType("int")
                        .HasColumnName("repeticiones");

                    b.Property<int>("RutinaId")
                        .HasColumnType("int")
                        .HasColumnName("rutina_id");

                    b.Property<int?>("Series")
                        .HasColumnType("int")
                        .HasColumnName("series");

                    b.HasKey("Id");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("RutinaId");

                    b.ToTable("rutina_plantilla_ejercicio", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activa");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int")
                        .HasColumnName("capacidad");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("sala", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Socio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dni");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.ToTable("socio", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fin");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inicio");

                    b.Property<int?>("OrdenPagoId")
                        .HasColumnType("int")
                        .HasColumnName("orden_pago_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.HasKey("Id");

                    b.HasIndex("OrdenPagoId");

                    b.HasIndex("PlanId");

                    

                    b.HasIndex("SocioId");

                    b.ToTable("suscripcion", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.SuscripcionTurno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SuscripcionId")
                        .HasColumnType("int")
                        .HasColumnName("suscripcion_id");

                    b.Property<int>("TurnoPlantillaId")
                        .HasColumnType("int")
                        .HasColumnName("turno_plantilla_id");

                    b.HasKey("Id");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("TurnoPlantillaId");

                    b.ToTable("suscripcion_turno", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.TurnoPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<int>("Cupo")
                        .HasColumnType("int")
                        .HasColumnName("cupo");

                    b.Property<byte>("DiaSemanaId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("dia_semana_id");


                    b.Property<int>("DuracionMin")
                        .HasColumnType("int")
                        .HasColumnName("duracion_min");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time(6)")
                        .HasColumnName("hora_inicio");

                    b.Property<int>("PersonalId")
                        .HasColumnType("int")
                        .HasColumnName("personal_id");


                    b.Property<int>("SalaId")
                        .HasColumnType("int")
                        .HasColumnName("sala_id");

                    b.HasKey("Id");

                    b.HasIndex("DiaSemanaId");

                   

                    b.HasIndex("PersonalId");


                    b.HasIndex("SalaId");

                    b.ToTable("turno_plantilla", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("longtext")
                        .HasColumnName("alias");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<int?>("IdAvatar")
                        .HasColumnType("int")
                        .HasColumnName("id_avatar");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<int?>("PersonalId")
                        .HasColumnType("int")
                        .HasColumnName("personal_id");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.Property<int?>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.HasKey("Id");

                    b.HasIndex("IdAvatar");

                    b.HasIndex("PersonalId")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.HasIndex("SocioId");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.VCheckinHoyAr", b =>
                {
                    b.Property<DateTime?>("FechaAr")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_ar");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Origen")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("origen");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.Property<int?>("TurnoPlantillaId")
                        .HasColumnType("int")
                        .HasColumnName("turno_plantilla_id");

                    b.ToTable("v_checkin_hoy_ar", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.VCupoReservado", b =>
                {
                    b.Property<int>("Cupo")
                        .HasColumnType("int")
                        .HasColumnName("cupo");

                    b.Property<byte>("DiaSemana")
                        .HasColumnType("tinyint")
                        .HasColumnName("dia_semana");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time(6)")
                        .HasColumnName("hora_inicio");

                    b.Property<long>("Reservados")
                        .HasColumnType("bigint")
                        .HasColumnName("reservados");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("turno_id");

                    b.ToTable("v_cupo_reservado", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.VOcupacionHoy", b =>
                {
                    b.Property<long>("Asistencias")
                        .HasColumnType("bigint")
                        .HasColumnName("asistencias");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("turno_id");

                    b.ToTable("v_ocupacion_hoy", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.VOrdenesAr", b =>
                {
                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("monto");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.Property<DateTime?>("VenceEnAr")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("vence_en_ar");

                    b.ToTable("v_ordenes_ar", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.VSuscripcionesAr", b =>
                {
                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FinAr")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fin_ar");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("InicioAr")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inicio_ar");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("socio_id");

                    b.ToTable("v_suscripciones_ar", (string)null);
                });

            modelBuilder.Entity("Comprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("file_url");

                    b.Property<string>("MimeType")
                        .HasColumnType("longtext")
                        .HasColumnName("mime_type");

                    b.Property<DateTime>("SubidoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("subido_en");

                    b.HasKey("Id");

                    b.ToTable("comprobante", (string)null);
                });

            modelBuilder.Entity("Api.Data.Models.Checkin", b =>
                {
                    b.HasOne("Api.Data.Models.Socio", "Socio")
                        .WithMany("Checkins")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.TurnoPlantilla", "TurnoPlantilla")
                        .WithMany()
                        .HasForeignKey("TurnoPlantillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Socio");

                    b.Navigation("TurnoPlantilla");
                });

            modelBuilder.Entity("Api.Data.Models.OrdenPago", b =>
                {
                    b.HasOne("Comprobante", "Comprobante")
                        .WithOne("OrdenPago")
                        .HasForeignKey("Api.Data.Models.OrdenPago", "ComprobanteId");

                    b.HasOne("Api.Data.Models.EstadoOrdenPago", "Estado")
                        .WithMany("OrdenesPago")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Plan", "Plan")
                        .WithMany("OrdenesPago")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Socio", "Socio")
                        .WithMany("OrdenesPago")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprobante");

                    b.Navigation("Estado");

                    b.Navigation("Plan");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("Api.Data.Models.PasswordResetToken", b =>
                {
                    b.HasOne("Api.Data.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api.Data.Models.RegistroEntrenamiento", b =>
                {
                    b.HasOne("Api.Data.Models.RutinaAsignada", "RutinaAsignada")
                        .WithMany("RegistrosEntrenamiento")
                        .HasForeignKey("RutinaAsignadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RutinaAsignada");
                });

            modelBuilder.Entity("Api.Data.Models.RegistroItem", b =>
                {
                    b.HasOne("Api.Data.Models.Ejercicio", "Ejercicio")
                        .WithMany("RegistroItems")
                        .HasForeignKey("EjercicioId");

                    b.HasOne("Api.Data.Models.RegistroEntrenamiento", "Registro")
                        .WithMany("RegistrosItem")
                        .HasForeignKey("RegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ejercicio");

                    b.Navigation("Registro");
                });

            modelBuilder.Entity("Api.Data.Models.RutinaAsignada", b =>
                {
                    b.HasOne("Api.Data.Models.RutinaPlantilla", "Rutina")
                        .WithMany("RutinasAsignadas")
                        .HasForeignKey("RutinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Socio", "Socio")
                        .WithMany("RutinasAsignadas")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rutina");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("Api.Data.Models.RutinaPlantilla", b =>
                {
                    b.HasOne("Api.Data.Models.Plan", "Plan")
                        .WithMany("RutinasPlantilla")
                        .HasForeignKey("PlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Api.Data.Models.RutinaPlantillaEjercicio", b =>
                {
                    b.HasOne("Api.Data.Models.Ejercicio", "Ejercicio")
                        .WithMany("RutinaPlantillaEjercicios")
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.RutinaPlantilla", "Rutina")
                        .WithMany("RutinaPlantillaEjercicios")
                        .HasForeignKey("RutinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ejercicio");

                    b.Navigation("Rutina");
                });

            modelBuilder.Entity("Api.Data.Models.Suscripcion", b =>
                {
                    b.HasOne("Api.Data.Models.OrdenPago", "OrdenPago")
                        .WithMany()
                        .HasForeignKey("OrdenPagoId");

                    b.HasOne("Api.Data.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                  
                    b.HasOne("Api.Data.Models.Socio", "Socio")
                        .WithMany("Suscripciones")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrdenPago");

                    b.Navigation("Plan");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("Api.Data.Models.SuscripcionTurno", b =>
                {
                    b.HasOne("Api.Data.Models.Suscripcion", "Suscripcion")
                        .WithMany()
                        .HasForeignKey("SuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.TurnoPlantilla", "TurnoPlantilla")
                        .WithMany()
                        .HasForeignKey("TurnoPlantillaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Suscripcion");

                    b.Navigation("TurnoPlantilla");
                });

            modelBuilder.Entity("Api.Data.Models.TurnoPlantilla", b =>
                {
                    b.HasOne("Api.Data.Models.DiaSemana", "DiaSemana")
                        .WithMany()
                        .HasForeignKey("DiaSemanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.DiaSemana", null)
                        .WithMany("TurnosPlantilla");
                        

                    b.HasOne("Api.Data.Models.Personal", "Personal")
                        .WithMany()
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Personal", null)
                        .WithMany("TurnosPlantilla");

                    b.HasOne("Api.Data.Models.Sala", "Sala")
                        .WithMany("TurnosPlantilla")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiaSemana");

                    b.Navigation("Personal");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Api.Data.Models.Usuario", b =>
                {
                    b.HasOne("Api.Data.Models.Avatar", "Avatar")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdAvatar")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Usuario_Avatar");

                    b.HasOne("Api.Data.Models.Personal", "Personal")
                        .WithOne("Usuario")
                        .HasForeignKey("Api.Data.Models.Usuario", "PersonalId");

                    b.HasOne("Api.Data.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Socio", "Socio")
                        .WithMany()
                        .HasForeignKey("SocioId");

                    b.Navigation("Avatar");

                    b.Navigation("Personal");

                    b.Navigation("Rol");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("Api.Data.Models.Avatar", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Api.Data.Models.DiaSemana", b =>
                {
                    b.Navigation("TurnosPlantilla");
                });

            modelBuilder.Entity("Api.Data.Models.Ejercicio", b =>
                {
                    b.Navigation("RegistroItems");

                    b.Navigation("RutinaPlantillaEjercicios");
                });

            modelBuilder.Entity("Api.Data.Models.EstadoOrdenPago", b =>
                {
                    b.Navigation("OrdenesPago");
                });

            modelBuilder.Entity("Api.Data.Models.Personal", b =>
                {
                    b.Navigation("TurnosPlantilla");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api.Data.Models.Plan", b =>
                {
                    b.Navigation("OrdenesPago");

                    b.Navigation("RutinasPlantilla");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Api.Data.Models.RegistroEntrenamiento", b =>
                {
                    b.Navigation("RegistrosItem");
                });

            modelBuilder.Entity("Api.Data.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Api.Data.Models.RutinaAsignada", b =>
                {
                    b.Navigation("RegistrosEntrenamiento");
                });

            modelBuilder.Entity("Api.Data.Models.RutinaPlantilla", b =>
                {
                    b.Navigation("RutinaPlantillaEjercicios");

                    b.Navigation("RutinasAsignadas");
                });

            modelBuilder.Entity("Api.Data.Models.Sala", b =>
                {
                    b.Navigation("TurnosPlantilla");
                });

            modelBuilder.Entity("Api.Data.Models.Socio", b =>
                {
                    b.Navigation("Checkins");

                    b.Navigation("OrdenesPago");

                    b.Navigation("RutinasAsignadas");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Comprobante", b =>
                {
                    b.Navigation("OrdenPago");
                });
#pragma warning restore 612, 618
        }
    }
}
